{"version":3,"sources":["config/firebase/index.js","containers/pages/Dashboard/index.js","config/redux/action/index.js","components/atoms/Button/index.js","containers/pages/Login/index .js","containers/pages/Register/index.js","config/redux/reducer/index.js","config/redux/store/index.js","containers/pages/App/index.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","Dashboard","state","title","content","date","textButton","noteId","handleSaveNotes","props","saveNotes","updateNotes","userData","JSON","parse","localStorage","getItem","data","Date","getTime","userId","uid","console","log","onInputChange","e","type","setState","target","value","note","id","cancelUpdate","deleteNote","stopPropagation","this","getNotes","notes","className","placeholder","onChange","onClick","length","map","key","Component","connect","user","dispatch","ref","push","addDataToAPI","urlNotes","Promise","resolve","reject","on","snapshot","val","Object","keys","set","err","updateDataAPI","remove","deleteDataAPI","Button","loading","Login","email","password","handleChangeText","handleLoginSubmit","a","history","loginAPI","catch","res","setItem","stringify","isLoading","auth","signInWithEmailAndPassword","then","alert","dataUser","emailVerified","refreshToken","error","errorCode","code","errorMessage","message","LoginUserAPI","Register","handleRegisterSubmit","registerAPI","createUserWithEmailAndPassword","registerUserAPI","initialState","popup","isLogin","reducer","action","store","createStore","applyMiddleware","thunk","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e5256926.chunk.js","sourcesContent":["import firebase from 'firebase';\r\nimport 'firebase/auth';\r\nimport 'firebase/database';\r\n// import 'firebase/firestore';\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAgy2k0D_v3DSYNgFIedUzQTScP1TGFnwg\",\r\n  authDomain: \"todoapp-ba611.firebaseapp.com\",\r\n  databaseURL: \"https://todoapp-ba611.firebaseio.com\",\r\n  projectId: \"todoapp-ba611\",\r\n  storageBucket: \"todoapp-ba611.appspot.com\",\r\n  messagingSenderId: \"544732164949\",\r\n  appId: \"1:544732164949:web:6cb999b4a9098e4f7c35dc\",\r\n  measurementId: \"G-C4VDBDPQ4T\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const database = firebase.database();\r\n\r\nexport default firebase;","import React, {Component, Fragment} from 'react';\r\nimport './Dashboard.scss';\r\nimport { connect } from 'react-redux'\r\nimport { addDataToAPI, getDataFromAPI, updateDataAPI, deleteDataAPI } from '../../../config/redux/action';\r\n\r\nclass Dashboard extends Component{\r\n    state = {\r\n        title:'',\r\n        content:'',\r\n        date:'',\r\n        textButton:'SIMPAN',\r\n        noteId:''\r\n    }\r\n\r\n    componentDidMount(){\r\n        const userData = JSON.parse(localStorage.getItem('userData')); \r\n        this.props.getNotes(userData.uid);\r\n    }\r\n\r\n    handleSaveNotes = () => {\r\n        const {title,content,textButton,noteId} = this.state;\r\n        const {saveNotes,updateNotes} = this.props;\r\n        const userData = JSON.parse(localStorage.getItem('userData'))\r\n        \r\n        const data = {\r\n            title: title,\r\n            content: content,\r\n            date: new Date().getTime(),\r\n            userId: userData.uid\r\n        }\r\n\r\n        if (textButton === 'SIMPAN') {\r\n            saveNotes(data)\r\n        } else {\r\n            data.noteId = noteId;\r\n            updateNotes(data)\r\n        }\r\n        console.log(data)\r\n    }\r\n\r\n    onInputChange = (e, type) => {\r\n        this.setState({\r\n            [type] : e.target.value\r\n        })\r\n    }\r\n\r\n    updateNotes = (note) => {\r\n        console.log(note)\r\n        this.setState({\r\n            title: note.data.title,\r\n            content: note.data.content,\r\n            textButton: 'UPDATE',\r\n            noteId: note.id\r\n        })\r\n    }\r\n\r\n    cancelUpdate = () => {\r\n        this.setState({\r\n            title: '',\r\n            content: '',\r\n            textButton: 'SIMPAN'\r\n        })\r\n    }\r\n\r\n    deleteNote  = (e, note) => {\r\n        e.stopPropagation();\r\n        const {deleteNote} = this.props;\r\n        const userData = JSON.parse(localStorage.getItem('userData'))\r\n        const data = {\r\n            userId: userData.uid,\r\n            noteId: note.id,\r\n        }\r\n        deleteNote(data)\r\n    }\r\n    render(){\r\n        const {title,content,textButton} = this.state;\r\n        const {notes} = this.props;\r\n        const {updateNotes,cancelUpdate,deleteNote} = this;\r\n        console.log('notes: ', notes);\r\n        return(\r\n            <div className=\"background-only\">\r\n            <div className=\"container\">\r\n                <div className=\"input-form\">\r\n                    <input placeholder=\"title\" className=\"input-title\" value={title} onChange={(e) => this.onInputChange(e,'title')}/>\r\n                    <textarea placeholder=\"content\" className=\"input-content\" value={content} onChange={(e) => this.onInputChange(e,'content')}>\r\n\r\n                    </textarea>\r\n                    <div className=\"action-wrapper\">\r\n                        {\r\n                            textButton === 'UPDATE' ? (\r\n                                <button className=\"save-btn cancel\" onClick={this.handleSaveNotes} onClick={cancelUpdate}> Cancel </button>\r\n                            ) : <div />\r\n                        }\r\n                        <button className=\"save-btn\" onClick={this.handleSaveNotes}> {textButton} </button>\r\n                    </div>\r\n                </div>\r\n                <hr />\r\n                {\r\n                    notes.length > 0 ? (\r\n                        <Fragment>\r\n                            {\r\n                                notes.map(note => {\r\n                                    return (\r\n                                       <div className=\"card-content\" key={note.id} onClick={() => updateNotes(note)}>\r\n                                            <p className=\"title\">{note.data.title}</p>\r\n                                            <p className=\"date\">{note.data.date}</p>\r\n                                            <p className=\"content\">{note.data.content}</p>\r\n                                            <div className=\"delete-btn\" onClick={(e) => deleteNote(e, note)}>X</div>\r\n                                        </div> \r\n                                    ) \r\n                                })\r\n                            }\r\n                        </Fragment>\r\n                        \r\n                    ) : null\r\n                }\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst reduxState = (state) => ({\r\n    userData : state.user,\r\n    notes : state.notes\r\n})\r\n\r\nconst reduxDispatch = (dispatch) => ({\r\n    saveNotes : (data) => dispatch(addDataToAPI(data)),\r\n    getNotes : (data) => dispatch(getDataFromAPI(data)),\r\n    updateNotes : (data) => dispatch(updateDataAPI(data)),\r\n    deleteNote : (data) => dispatch(deleteDataAPI(data))\r\n}) \r\n\r\nexport default connect(reduxState,reduxDispatch)(Dashboard);","import firebase, {database} from '../../firebase';\r\n\r\nexport const actionUserName = () => (dispatch) => {\r\n    setTimeout(() => {\r\n        return dispatch({type: 'CHANGE_USER', value: \"Febriana Pam\"})\r\n    }, 1000)\r\n    \r\n}\r\n\r\nexport const registerUserAPI = (data) => (dispatch) => {\r\n    dispatch({type: 'CHANGE_LOADING', value: true})\r\n    return (\r\n        firebase.auth().createUserWithEmailAndPassword(data.email, data.password)\r\n        .then(res => {\r\n           alert('success: ', res);\r\n            dispatch({type: 'CHANGE_LOADING', value: false})\r\n        })\r\n        .catch(function(error){\r\n            var errorCode = error.code;\r\n            var errorMessage = error.message;\r\n            alert(errorCode, errorMessage);\r\n            dispatch({type: 'CHANGE_LOADING', value: false})\r\n        })\r\n    )\r\n}\r\n\r\nexport const LoginUserAPI = (data) => (dispatch) => {\r\n    return new Promise((resolve, reject) => {\r\n        dispatch({type: 'CHANGE_LOADING', value: true})\r\n        firebase.auth().signInWithEmailAndPassword(data.email, data.password)\r\n        .then(res => {\r\n           alert('success: ', res);\r\n            const dataUser = {\r\n                email: res.user.email,\r\n                uid: res.user.uid,\r\n                emailVerified: res.user.emailVerified,\r\n                refreshToken: res.user.refreshToken\r\n            }\r\n            dispatch({type: 'CHANGE_LOADING', value: false})\r\n            dispatch({type: 'CHANGE_LOGIN', value: true})\r\n            dispatch({type: 'CHANGE_USER', value: dataUser})\r\n            resolve(dataUser)\r\n        })\r\n        .catch(function(error){\r\n            var errorCode = error.code;\r\n            var errorMessage = error.message;\r\n            alert(errorCode, errorMessage);\r\n            dispatch({type: 'CHANGE_LOADING', value: false})\r\n            dispatch({type: 'CHANGE_LOGIN', value: false})\r\n            reject(false)\r\n        })\r\n    })\r\n}\r\n\r\nexport const addDataToAPI = (data) => (dispatch) => {\r\n    database.ref('notes/' + data.userId).push({\r\n        title: data.title,\r\n        content: data.content,\r\n        date: data.date\r\n    })\r\n}\r\n\r\nexport const getDataFromAPI = (userId) => (dispatch) => {\r\n    const urlNotes = database.ref('notes/' + userId);\r\n    return new Promise((resolve,reject) => {\r\n        urlNotes.on('value', function(snapshot) {\r\n            console.log('get Data: ',snapshot.val());\r\n            if (snapshot.val()!==null) {\r\n                const data = [];\r\n                Object.keys(snapshot.val()).map(key => {\r\n                    data.push({\r\n                        id: key,\r\n                        data: snapshot.val()[key]\r\n                    })\r\n                })\r\n                dispatch({type: 'SET_NOTES', value: data})\r\n                resolve(snapshot.val())\r\n            }\r\n        });\r\n    })\r\n    \r\n}\r\n\r\nexport const updateDataAPI = (data) => (dispatch) => {\r\n    const urlNotes = database.ref('notes/' + data.userId +'/' + data.noteId);\r\n    return new Promise((resolve,reject) => {\r\n        urlNotes.set({\r\n            title: data.title,\r\n            content: data.content,\r\n            date: data.date\r\n        }, (err) => {\r\n            if (err) {\r\n                reject(false);\r\n            } else {\r\n                resolve(true);\r\n            }\r\n\r\n        });\r\n    })\r\n    \r\n}\r\n\r\nexport const deleteDataAPI = (data) => (dispatch) => {\r\n    const urlNotes = database.ref('notes/' + data.userId +'/' + data.noteId);\r\n    return new Promise((resolve,reject) => {\r\n        urlNotes.remove();\r\n    })\r\n    \r\n}","import React from 'react';\r\n\r\nconst Button = ({title, onClick, loading}) => {\r\n    if(loading){\r\n        return <button className=\"btn disable\">Loading...</button>\r\n    }\r\n    \r\n    return (\r\n        <button className=\"btn\" onClick={onClick}>{title}</button>\r\n    )\r\n}\r\n\r\nexport default Button;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Button from '../../../components/atoms/Button';\r\nimport { LoginUserAPI } from '../../../config/redux/action';\r\n\r\nclass Login extends Component{\r\n    state={\r\n        email: '',\r\n        password: '',\r\n    }\r\n\r\n    handleChangeText = (e) =>{\r\n        this.setState({\r\n            [e.target.id]: e.target.value,\r\n        })\r\n    }\r\n\r\n    handleLoginSubmit = async() =>{\r\n        const {email, password}=this.state;\r\n        const {history} = this.props;\r\n        const res = await this.props.loginAPI({email, password}).catch(err => err);\r\n        if(res){\r\n            console.log('Login Success',res);\r\n            localStorage.setItem('userData', JSON.stringify(res))\r\n            this.setState({\r\n                email: \"\",\r\n                password: \"\"\r\n            })\r\n            history.push('/')\r\n        }else {\r\n            console.log('Login Failed')\r\n        }\r\n        \r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div className=\"auth-container\">\r\n                    <div className=\"auth-card\">\r\n                        <p className=\"auth-title\">Login Page</p>\r\n                        <input className=\"input\" id=\"email\" placeholder=\"Email\" type=\"text\" onChange={this.handleChangeText} value={this.state.email}/>\r\n                        <input className=\"input\" id=\"password\" placeholder=\"Password\" type=\"password\" onChange={this.handleChangeText} value={this.state.password}/>\r\n                        <Button onClick={this.handleLoginSubmit} title=\"Login\" loading={this.props.isLoading}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst reduxState = (state) => ({\r\n    isLoading: state.isLoading\r\n})\r\n\r\nconst reduxDispatch = (dispatch) => ({\r\n    loginAPI: (data) => dispatch(LoginUserAPI(data))\r\n})\r\n\r\nexport default connect(reduxState, reduxDispatch)(Login);","import React, {Component} from 'react';\r\nimport './Register.scss'\r\nimport Button from '../../../components/atoms/Button';\r\nimport { connect } from 'react-redux';\r\nimport { registerUserAPI } from '../../../config/redux/action';\r\n\r\nclass Register extends Component{\r\n    state={\r\n        email: '',\r\n        password: '',\r\n    }\r\n\r\n    handleChangeText = (e) =>{\r\n        this.setState({\r\n            [e.target.id]: e.target.value,\r\n            \r\n        })\r\n    }\r\n\r\n    handleRegisterSubmit = () =>{\r\n        const {email, password}=this.state;\r\n        this.props.registerAPI({email, password});\r\n        this.setState({\r\n            email: \"\",\r\n            password: \"\"\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div className=\"auth-container\">\r\n                    <div className=\"auth-card\">\r\n                        <p className=\"auth-title\">Register Page</p>\r\n                        <input className=\"input\" id=\"email\" placeholder=\"Email\" type=\"text\" onChange={this.handleChangeText} value={this.state.email}/>\r\n                        <input className=\"input\" id=\"password\" placeholder=\"Password\" type=\"password\" onChange={this.handleChangeText} value={this.state.password}/>\r\n                        <Button onClick={this.handleRegisterSubmit} title=\"Register\" loading={this.props.isLoading}/>\r\n                    </div>\r\n                </div>\r\n                <button>Go To Dashboard</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst reduxState = (state) => ({\r\n    isLoading: state.isLoading\r\n})\r\n\r\nconst reduxDispatch = (dispatch) => ({\r\n    registerAPI: (data) => dispatch(registerUserAPI(data))\r\n})\r\n\r\nexport default connect(reduxState, reduxDispatch)(Register);","const initialState= {\r\n    popup: false,\r\n    isLogin: false,\r\n    isLoading: false,\r\n    user: {},\r\n    notes: []\r\n  }\r\n  \r\n  const reducer = (state=initialState, action) => {\r\n    if(action.type === 'CHANGE_POPUP'){\r\n      return{\r\n        ...state, \r\n        popup: action.value \r\n      }\r\n    }\r\n\r\n    if(action.type === 'CHANGE_ISLOGIN'){\r\n      return{\r\n        ...state,\r\n        isLogin: action.value\r\n      }\r\n    }\r\n\r\n    if(action.type === 'CHANGE_USER'){\r\n      return{\r\n        ...state,\r\n        user: action.value\r\n      }\r\n    }\r\n\r\n    if(action.type === 'CHANGE_LOADING'){\r\n      return{\r\n        ...state,\r\n        isLoading: action.value\r\n      }\r\n    }\r\n\r\n    if(action.type === 'SET_NOTES'){\r\n      return{\r\n        ...state,\r\n        notes: action.value\r\n      }\r\n    }\r\n\r\n    return state;\r\n  }\r\n\r\n  export default reducer;\r\n  ","import { createStore, applyMiddleware  } from \"redux\";\r\nimport thunk from 'redux-thunk';\r\nimport reducer from '../reducer';\r\n\r\n\r\nexport const store = createStore(reducer, applyMiddleware(thunk))\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\r\nimport Dashboard from '../Dashboard';\r\nimport Login from '../Login/index ';\r\nimport Register from '../Register';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from '../../../config/redux'; \r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Router>\r\n        <div>\r\n            <Route path=\"/login\" exact component={Login}></Route>\r\n            <Route path=\"/register\" exact component={Register}></Route>\r\n            <Route path=\"/\" exact component={Dashboard}></Route>\r\n        </div>\r\n      </Router>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/pages/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport firebase from './config/firebase';\r\n\r\n// console.log('config firebase => ', firebase);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}